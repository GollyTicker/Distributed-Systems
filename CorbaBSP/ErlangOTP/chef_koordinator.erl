%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: chef_koordinator
%% Source: c:/DOKUME~1/CHRIST~1/EIGENE~1/Download/cpp/cpp/chef.idl
%% IC vsn: 4.2.31
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module(chef_koordinator).
-ic_compiled("4_2_31").


%% Interface functions
-export([getsteeringval/1, getsteeringval/2, hello/2]).
-export([hello/3, brief/4, brief/5]).
-export([terminated/4, terminated/5, closed/4]).
-export([closed/5]).

%% Type identification function
-export([typeID/0]).

%% Used to start server
-export([oe_create/0, oe_create_link/0, oe_create/1]).
-export([oe_create_link/1, oe_create/2, oe_create_link/2]).

%% TypeCode Functions and inheritance
-export([oe_tc/1, oe_is_a/1, oe_get_interface/0]).

%% gen server export stuff
-behaviour(gen_server).
-export([init/1, terminate/2, handle_call/3]).
-export([handle_cast/2, handle_info/2, code_change/3]).

-include_lib("orber/include/corba.hrl").


%%------------------------------------------------------------
%%
%% Object interface functions.
%%
%%------------------------------------------------------------



%%%% Operation: getsteeringval
%% 
%%   Returns: RetVal, Pnum, Wtime, Term
%%
getsteeringval(OE_THIS) ->
    corba:call(OE_THIS, getsteeringval, [], ?MODULE).

getsteeringval(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, getsteeringval, [], ?MODULE, OE_Options).

%%%% Operation: hello
%% 
%%   Returns: RetVal
%%
hello(OE_THIS, Pid) ->
    corba:call(OE_THIS, hello, [Pid], ?MODULE).

hello(OE_THIS, OE_Options, Pid) ->
    corba:call(OE_THIS, hello, [Pid], ?MODULE, OE_Options).

%%%% Operation: brief
%% 
%%   Returns: RetVal
%%
brief(OE_THIS, Pid, Pm, Ptime) ->
    corba:cast(OE_THIS, brief, [Pid, Pm, Ptime], ?MODULE).

brief(OE_THIS, OE_Options, Pid, Pm, Ptime) ->
    corba:cast(OE_THIS, brief, [Pid, Pm, Ptime], ?MODULE, OE_Options).

%%%% Operation: terminated
%% 
%%   Returns: RetVal
%%
terminated(OE_THIS, Pid, Ggt, Ptime) ->
    corba:cast(OE_THIS, terminated, [Pid, Ggt, Ptime], ?MODULE).

terminated(OE_THIS, OE_Options, Pid, Ggt, Ptime) ->
    corba:cast(OE_THIS, terminated, [Pid, Ggt, Ptime], ?MODULE, OE_Options).

%%%% Operation: closed
%% 
%%   Returns: RetVal
%%
closed(OE_THIS, Pid, Pm, Ptime) ->
    corba:cast(OE_THIS, closed, [Pid, Pm, Ptime], ?MODULE).

closed(OE_THIS, OE_Options, Pid, Pm, Ptime) ->
    corba:cast(OE_THIS, closed, [Pid, Pm, Ptime], ?MODULE, OE_Options).

%%------------------------------------------------------------
%%
%% Inherited Interfaces
%%
%%------------------------------------------------------------
oe_is_a("IDL:chef/koordinator:1.0") -> true;
oe_is_a(_) -> false.

%%------------------------------------------------------------
%%
%% Interface TypeCode
%%
%%------------------------------------------------------------
oe_tc(getsteeringval) -> 
	{tk_long,[],[tk_long,tk_long,tk_long]};
oe_tc(hello) -> 
	{tk_long,[tk_long],[]};
oe_tc(brief) -> 
	{tk_void,[tk_long,tk_long,tk_long],[]};
oe_tc(terminated) -> 
	{tk_void,[tk_long,tk_long,tk_long],[]};
oe_tc(closed) -> 
	{tk_void,[tk_long,tk_long,tk_long],[]};
oe_tc(_) -> undefined.

oe_get_interface() -> 
	[{"closed", oe_tc(closed)},
	{"terminated", oe_tc(terminated)},
	{"brief", oe_tc(brief)},
	{"hello", oe_tc(hello)},
	{"getsteeringval", oe_tc(getsteeringval)}].




%%------------------------------------------------------------
%%
%% Object server implementation.
%%
%%------------------------------------------------------------


%%------------------------------------------------------------
%%
%% Function for fetching the interface type ID.
%%
%%------------------------------------------------------------

typeID() ->
    "IDL:chef/koordinator:1.0".


%%------------------------------------------------------------
%%
%% Object creation functions.
%%
%%------------------------------------------------------------

oe_create() ->
    corba:create(?MODULE, "IDL:chef/koordinator:1.0").

oe_create_link() ->
    corba:create_link(?MODULE, "IDL:chef/koordinator:1.0").

oe_create(Env) ->
    corba:create(?MODULE, "IDL:chef/koordinator:1.0", Env).

oe_create_link(Env) ->
    corba:create_link(?MODULE, "IDL:chef/koordinator:1.0", Env).

oe_create(Env, RegName) ->
    corba:create(?MODULE, "IDL:chef/koordinator:1.0", Env, RegName).

oe_create_link(Env, RegName) ->
    corba:create_link(?MODULE, "IDL:chef/koordinator:1.0", Env, RegName).

%%------------------------------------------------------------
%%
%% Init & terminate functions.
%%
%%------------------------------------------------------------

init(Env) ->
%% Call to implementation init
    corba:handle_init(chef_koordinator_impl, Env).

terminate(Reason, State) ->
    corba:handle_terminate(chef_koordinator_impl, Reason, State).


%%%% Operation: getsteeringval
%% 
%%   Returns: RetVal, Pnum, Wtime, Term
%%
handle_call({_, OE_Context, getsteeringval, []}, _, OE_State) ->
  corba:handle_call(chef_koordinator_impl, getsteeringval, [], OE_State, OE_Context, false, false);

%%%% Operation: hello
%% 
%%   Returns: RetVal
%%
handle_call({_, OE_Context, hello, [Pid]}, _, OE_State) ->
  corba:handle_call(chef_koordinator_impl, hello, [Pid], OE_State, OE_Context, false, false);



%%%% Standard gen_server call handle
%%
handle_call(stop, _, State) ->
    {stop, normal, ok, State};

handle_call(_, _, State) ->
    {reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.
%%%% Operation: brief
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, brief, [Pid, Pm, Ptime]}, OE_State) ->
    corba:handle_cast(chef_koordinator_impl, brief, [Pid, Pm, Ptime], OE_State, OE_Context, false);

%%%% Operation: terminated
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, terminated, [Pid, Ggt, Ptime]}, OE_State) ->
    corba:handle_cast(chef_koordinator_impl, terminated, [Pid, Ggt, Ptime], OE_State, OE_Context, false);

%%%% Operation: closed
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, closed, [Pid, Pm, Ptime]}, OE_State) ->
    corba:handle_cast(chef_koordinator_impl, closed, [Pid, Pm, Ptime], OE_State, OE_Context, false);



%%%% Standard gen_server cast handle
%%
handle_cast(stop, State) ->
    {stop, normal, State};

handle_cast(_, State) ->
    {noreply, State}.


%%%% Standard gen_server handles
%%
handle_info(_, State) ->
    {noreply, State}.


code_change(OldVsn, State, Extra) ->
    corba:handle_code_change(chef_koordinator_impl, OldVsn, State, Extra).

