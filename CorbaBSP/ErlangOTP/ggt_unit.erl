%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: ggt_unit
%% Source: c:/DOKUME~1/CHRIST~1/EIGENE~1/Download/cpp/cpp/ggt.idl
%% IC vsn: 4.2.31
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module(ggt_unit).
-ic_compiled("4_2_31").


%% Interface functions
-export([setneighbors/3, setneighbors/4, setpm/2]).
-export([setpm/3, sendy/2, sendy/3]).
-export(['query'/1, 'query'/2, response/2]).
-export([response/3, close/1, close/2]).

%% Type identification function
-export([typeID/0]).

%% Used to start server
-export([oe_create/0, oe_create_link/0, oe_create/1]).
-export([oe_create_link/1, oe_create/2, oe_create_link/2]).

%% TypeCode Functions and inheritance
-export([oe_tc/1, oe_is_a/1, oe_get_interface/0]).

%% gen server export stuff
-behaviour(gen_server).
-export([init/1, terminate/2, handle_call/3]).
-export([handle_cast/2, handle_info/2, code_change/3]).

-include_lib("orber/include/corba.hrl").


%%------------------------------------------------------------
%%
%% Object interface functions.
%%
%%------------------------------------------------------------



%%%% Operation: setneighbors
%% 
%%   Returns: RetVal
%%
setneighbors(OE_THIS, Pidleft, Pidright) ->
    corba:call(OE_THIS, setneighbors, [Pidleft, Pidright], ?MODULE).

setneighbors(OE_THIS, OE_Options, Pidleft, Pidright) ->
    corba:call(OE_THIS, setneighbors, [Pidleft, Pidright], ?MODULE, OE_Options).

%%%% Operation: setpm
%% 
%%   Returns: RetVal
%%
setpm(OE_THIS, Pm) ->
    corba:cast(OE_THIS, setpm, [Pm], ?MODULE).

setpm(OE_THIS, OE_Options, Pm) ->
    corba:cast(OE_THIS, setpm, [Pm], ?MODULE, OE_Options).

%%%% Operation: sendy
%% 
%%   Returns: RetVal
%%
sendy(OE_THIS, Y) ->
    corba:cast(OE_THIS, sendy, [Y], ?MODULE).

sendy(OE_THIS, OE_Options, Y) ->
    corba:cast(OE_THIS, sendy, [Y], ?MODULE, OE_Options).

%%%% Operation: 'query'
%% 
%%   Returns: RetVal
%%
'query'(OE_THIS) ->
    corba:cast(OE_THIS, 'query', [], ?MODULE).

'query'(OE_THIS, OE_Options) ->
    corba:cast(OE_THIS, 'query', [], ?MODULE, OE_Options).

%%%% Operation: response
%% 
%%   Returns: RetVal
%%
response(OE_THIS, Y) ->
    corba:cast(OE_THIS, response, [Y], ?MODULE).

response(OE_THIS, OE_Options, Y) ->
    corba:cast(OE_THIS, response, [Y], ?MODULE, OE_Options).

%%%% Operation: close
%% 
%%   Returns: RetVal
%%
close(OE_THIS) ->
    corba:cast(OE_THIS, close, [], ?MODULE).

close(OE_THIS, OE_Options) ->
    corba:cast(OE_THIS, close, [], ?MODULE, OE_Options).

%%------------------------------------------------------------
%%
%% Inherited Interfaces
%%
%%------------------------------------------------------------
oe_is_a("IDL:ggt/unit:1.0") -> true;
oe_is_a(_) -> false.

%%------------------------------------------------------------
%%
%% Interface TypeCode
%%
%%------------------------------------------------------------
oe_tc(setneighbors) -> 
	{tk_long,[tk_long,tk_long],[]};
oe_tc(setpm) -> 
	{tk_void,[tk_long],[]};
oe_tc(sendy) -> 
	{tk_void,[tk_long],[]};
oe_tc('query') -> 
	{tk_void,[],[]};
oe_tc(response) -> 
	{tk_void,[tk_long],[]};
oe_tc(close) -> 
	{tk_void,[],[]};
oe_tc(_) -> undefined.

oe_get_interface() -> 
	[{"close", oe_tc(close)},
	{"response", oe_tc(response)},
	{"query", oe_tc('query')},
	{"sendy", oe_tc(sendy)},
	{"setpm", oe_tc(setpm)},
	{"setneighbors", oe_tc(setneighbors)}].




%%------------------------------------------------------------
%%
%% Object server implementation.
%%
%%------------------------------------------------------------


%%------------------------------------------------------------
%%
%% Function for fetching the interface type ID.
%%
%%------------------------------------------------------------

typeID() ->
    "IDL:ggt/unit:1.0".


%%------------------------------------------------------------
%%
%% Object creation functions.
%%
%%------------------------------------------------------------

oe_create() ->
    corba:create(?MODULE, "IDL:ggt/unit:1.0").

oe_create_link() ->
    corba:create_link(?MODULE, "IDL:ggt/unit:1.0").

oe_create(Env) ->
    corba:create(?MODULE, "IDL:ggt/unit:1.0", Env).

oe_create_link(Env) ->
    corba:create_link(?MODULE, "IDL:ggt/unit:1.0", Env).

oe_create(Env, RegName) ->
    corba:create(?MODULE, "IDL:ggt/unit:1.0", Env, RegName).

oe_create_link(Env, RegName) ->
    corba:create_link(?MODULE, "IDL:ggt/unit:1.0", Env, RegName).

%%------------------------------------------------------------
%%
%% Init & terminate functions.
%%
%%------------------------------------------------------------

init(Env) ->
%% Call to implementation init
    corba:handle_init(ggt_unit_impl, Env).

terminate(Reason, State) ->
    corba:handle_terminate(ggt_unit_impl, Reason, State).


%%%% Operation: setneighbors
%% 
%%   Returns: RetVal
%%
handle_call({_, OE_Context, setneighbors, [Pidleft, Pidright]}, _, OE_State) ->
  corba:handle_call(ggt_unit_impl, setneighbors, [Pidleft, Pidright], OE_State, OE_Context, false, false);



%%%% Standard gen_server call handle
%%
handle_call(stop, _, State) ->
    {stop, normal, ok, State};

handle_call(_, _, State) ->
    {reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.
%%%% Operation: setpm
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, setpm, [Pm]}, OE_State) ->
    corba:handle_cast(ggt_unit_impl, setpm, [Pm], OE_State, OE_Context, false);

%%%% Operation: sendy
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, sendy, [Y]}, OE_State) ->
    corba:handle_cast(ggt_unit_impl, sendy, [Y], OE_State, OE_Context, false);

%%%% Operation: 'query'
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, 'query', []}, OE_State) ->
    corba:handle_cast(ggt_unit_impl, 'query', [], OE_State, OE_Context, false);

%%%% Operation: response
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, response, [Y]}, OE_State) ->
    corba:handle_cast(ggt_unit_impl, response, [Y], OE_State, OE_Context, false);

%%%% Operation: close
%% 
%%   Returns: RetVal
%%
handle_cast({_, OE_Context, close, []}, OE_State) ->
    corba:handle_cast(ggt_unit_impl, close, [], OE_State, OE_Context, false);



%%%% Standard gen_server cast handle
%%
handle_cast(stop, State) ->
    {stop, normal, State};

handle_cast(_, State) ->
    {noreply, State}.


%%%% Standard gen_server handles
%%
handle_info(_, State) ->
    {noreply, State}.


code_change(OldVsn, State, Extra) ->
    corba:handle_code_change(ggt_unit_impl, OldVsn, State, Extra).

